security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        apikey_refresh_token_user_provider:
            entity:
                class: App\Entity\User
                property: id
        apikey_user_provider:
            entity:
                class: App\Entity\User
                property: apiKey
        jwt:
            lexik_jwt: # Lorsqu'on utilise ce provider, entity User doit implementer "JWTUserInterface"
                class: App\Entity\User
             
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # # L'idée ici c'est de pouvoir utiliser le champ "apiKey" dans User comme une pièce d'authentification. 
        # # Le Header authorization doit simplement verifier le Bearer si "apiKey" est correct
        # # Pour ce cas, l'user n'a pas besoin de s'authentifier, il doit juste posseder et montrer son "apiKey"
        # main: 
        #     provider: apikey_user_provider
        #     custom_authenticator: App\Security\ApiKeyAuthenticator 

        login:
            provider: app_user_provider
            pattern: ^/api/login$ # le $ permet de dire que c'est un chemin exacte
            stateless: true
            json_login:
                check_path: /api/login
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure 
        api:
            provider: jwt # On utilise ce provider fournit par lexik_jwt car pour les requêtes "api" on n'a pas besoin d'intéroger la BDD donnés pour avoir l'info sur l'User (Car les infos sont déjà stockés dans le Token JWT)    ---- A database-less user provider ----
            pattern:   ^/api
            stateless: true
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: /api/token/refresh # or, you may use the `api_refresh_token` route name
                provider: apikey_refresh_token_user_provider
        # main:
        #     lazy: true
        #     provider: app_user_provider
        #     json_login:
        #         check_path: api_login
        #         success_handler: lexik_jwt_authentication.handler.authentication_success
        #         failure_handler: lexik_jwt_authentication.handler.authentication_failure
            # json_login:
                # check_path: api_login
            # logout:
                # path: app_logout
            # custom_authenticator: App\Security\AppAuthenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/(login|token/refresh), roles: PUBLIC_ACCESS }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
